name: Kittygram CI/CD

on:
  push:
    branches:
      - main

jobs:
  tests:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: kittygram_user
          POSTGRES_PASSWORD: kittygram_password
          POSTGRES_DB: kittygram
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Check out code
        uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.9
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8==6.0.0 flake8-isort==6.0.0
      
      - name: Run flake8
        run: python -m flake8 backend/
      
      - name: Run backend tests
        working-directory: ./backend
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: kittygram
          DB_USER: kittygram_user
          DB_PASSWORD: kittygram_password
          SECRET_KEY: test-secret-key
          DEBUG: "False"
        run: |
          pip install -r requirements.txt
          python manage.py test
      
      - name: Run frontend tests
        working-directory: ./frontend
        run: |
          npm install
          npm test -- --watchAll=false

  build_and_push_to_docker_hub:
    needs: tests
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}
      
      - name: Build and push backend
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          push: true
          tags: |
            ${{ secrets.DOCKER_HUB_USERNAME }}/kittygram_backend:latest
            ${{ secrets.DOCKER_HUB_USERNAME }}/kittygram_backend:${{ github.sha }}
      
      - name: Build and push frontend
        uses: docker/build-push-action@v4
        with:
          context: ./frontend
          push: true
          tags: |
            ${{ secrets.DOCKER_HUB_USERNAME }}/kittygram_frontend:latest
            ${{ secrets.DOCKER_HUB_USERNAME }}/kittygram_frontend:${{ github.sha }}
      
      - name: Build and push gateway
        uses: docker/build-push-action@v4
        with:
          context: ./nginx
          push: true
          tags: |
            ${{ secrets.DOCKER_HUB_USERNAME }}/kittygram_gateway:latest
            ${{ secrets.DOCKER_HUB_USERNAME }}/kittygram_gateway:${{ github.sha }}

  deploy:
    needs: build_and_push_to_docker_hub
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3
      
      - name: Copy files to server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          source: "docker-compose.yml,.env"
          target: "~/kittygram/"
      
      - name: Deploy to server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          script: |
            cd ~/kittygram
            docker compose down || true
            docker compose pull
            docker compose up -d
            sleep 10  # Даем контейнерам время на запуск
            docker compose exec backend python manage.py migrate --no-input
            docker compose exec backend python manage.py collectstatic --no-input
            docker compose exec backend cp -r /app/collected_static/. /static/
            docker compose ps
      
      - name: Send Telegram notification
        if: success()
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message: "✅ Kittygram успешно развёрнут! (${{ github.sha }})"