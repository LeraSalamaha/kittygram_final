version: '3.8'

volumes:
  static:
  media:
  pg_data:

services:
  db:
    image: postgres:13
    container_name: db
    env_file:
      - .env
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-kittygram}
      POSTGRES_USER: ${POSTGRES_USER:-kittygram_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-kittygram_password}
    volumes:
      - pg_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-kittygram_user}"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - kittygram_network

  backend:
    image: lerasalamaha/kittygram_backend
    container_name: backend
    env_file:
      - .env
    volumes:
      - static:/app/collected_static
      - media:/app/media
    depends_on:
      db:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - kittygram_network

  frontend:
    build: 
      context: ./frontend
      dockerfile: Dockerfile
    image: kittygram_frontend
    container_name: frontend
    volumes:
      - static:/app/static
    env_file:
      - .env
    depends_on:
      - backend
    networks:
      - kittygram_network

  gateway:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    image: kittygram_gateway
    container_name: gateway
    ports:
      - "80:80" 
    volumes:
      - static:/static
      - media:/media
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/conf.d:/etc/nginx/conf.d
    depends_on:
      - backend
      - frontend
    restart: always
    networks:
      - kittygram_network

networks:
  kittygram_network:
    driver: bridge